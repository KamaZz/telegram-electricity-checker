import os
import requests
import telebot
import subprocess
import time
import random
import pendulum
from enum import Enum
import platform
from dotenv import load_dotenv

load_dotenv()

# Check all variables are set
if not os.getenv("HOSTS") or not os.getenv("CHECK_GENERATOR_STATE") or not os.getenv("GENERATOR_PORT") or not os.getenv("CHAT_IDS") or not os.getenv("TELEGRAM_KEY"):
    print("Please set the HOSTS, CHECK_GENERATOR_STATE, GENERATOR_PORT, CHAT_IDS and TELEGRAM_KEY environment "
          "variables.")
    exit(1)

if not os.getenv("DRY_RUN", "False") == "True":
    bot = telebot.TeleBot(os.getenv("TELEGRAM_KEY"))

hosts = os.getenv("HOSTS").split(",")
generator_port = os.getenv("GENERATOR_PORT")
chat_id = os.getenv("CHAT_IDS").split(",")

# 0, 3, 6, 9, 12, 15, 18, 21
shutdown_times = [i for i in range(0, 23) if i % 3 == 0]
# 4, 8, 12, 16, 20
up_times = [i + 1 for i in shutdown_times]


class electricity_states(Enum):
    no_electricity = -1
    unknown_electricity_source = 0
    generator = 1
    city_electricity = 2


# Get the current date in the Europe/Kiev timezone
def get_current_date():
    return pendulum.now("Europe/Kiev")


# Check if any of the hosts is up
def last_state():
    for host in hosts:
        try:
            if platform.system() != "Windows":
                subprocess.check_output(["ping", "-c", "10", host])
            else:
                subprocess.check_output(["ping", "-n", "10", host])
            return True
        except subprocess.CalledProcessError:
            pass

    return False


# Check if the generator is up
# In my case, I have a device that is not connected to the generator (Printer, Raspberry PI, old router).
# Therefore, when we start the generator, it will be OFF.
def check_generator_state():
    for host in hosts:
        try:
            r = requests.head(f"http://{host}:{generator_port}/", timeout=120)
            if r.status_code == 200:
                return False
        except:
            continue

    return last_state()


# Get the time of last power outage from the file
def get_last_power_outage():
    try:
        with open("last_power_outage.txt", "r") as f:
            return pendulum.parse(f.read(), tz="Europe/Kiev")
    except:
        return None


# Save the current time as the time of last power outage
def save_power_outage():
    with open("last_power_outage.txt", "w") as f:
        f.write(get_current_date().to_datetime_string())


# Get the time of last power state from the file
def get_last_power_state():
    try:
        with open("last_power_state.txt", "r") as f:
            state = f.read()
            if state in electricity_states.__members__:
                return electricity_states[state]
            else:
                return electricity_states.no_electricity
    except:
        return electricity_states.unknown_electricity_source


# Save the current state
def save_power_state(state):
    global current_state
    with open("last_power_state.txt", "w") as f:
        f.write(state.name)
        current_state = electricity_states(state)

    if current_state == electricity_states.no_electricity:
        save_power_outage()


# Get a random swear message
def get_swear_messages_en():
    return random.choice([
        "üò° Dammit, no electricity.",
        "üò° Fever to his mother... Electricity... Disappeared...",
        "üò° Let them burn in hell... Bastards stole toilets and electricity!",
        "üò° Cursed russians, the electricity is gone.",
        "üò° Devil! Cursed bastards again left us without electricity!",
        "üò° Damn moscow imperialists! The office is again without electricity!",
        "üò° So that it would be empty for these pests! Power supply is gone!",
        "üò° Very honored people, with regret we inform you that the office is currently without electricity.",
        "üò° This is the end! They give us the opportunity to save on electricity and donate the rest to the Armed Forces of Ukraine! The office lost power.",
        "üò° How much can it be?! Through cursed russians we are without electricity!",
        "üò° Talk to the teacher, you can't take it anymore with these hours without electricity!",
        "üò° The aunt says in the Viber chat that there's no electricity in the office! And her brother-in-law works at SBU!",
        "üò° Half of the head is already bald from nasty russia! The office is without electricity!",
    ])


# Get a random swear message
def get_swear_messages_uk():
    return random.choice([
        "üò° –ô–æ–±–∞–Ω–∞ —Ä—É—Å–Ω—è, –Ω–µ–º–∞—î –µ–ª–µ–∫—Ç—Ä–∏–∫–∏.",
        "üò° –¢—Ä—è—Å—Ü—è –π–æ–≥–æ –º–∞—Ç–µ—Ä—ñ... –ï–ª–µ–∫—Ç—Ä–∏–∫–∞... –¢–æ–π–≤–æ...",
        "üò° –•–∞–π —ó–º –≥—Ä–µ—Ü—å... –ö–∞—Ü–∞–ø–∏ –≤–∫—Ä–∞–ª–∏ —É–Ω—ñ—Ç–∞–∑–∏ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–∏–∫—É!",
        "üò° –ö–ª—è—Ç—ñ –º–æ—Å–∫–∞–ª—ñ, –µ–ª–µ–∫—Ç—Ä–∏–∫–∞ –ø—Ä–æ–ø–∞–ª–∞.",
        "üò° –î—ñ–¥—å–∫–æ! –ö–ª—è—Ç–∞ –∫–∞—Ü–∞–ø–Ω—è –∑–Ω–æ–≤ –ª–∏—à–∏–ª–∞ –Ω–∞—Å –µ–ª–µ–∫—Ç—Ä–∏–∫–∏!",
        "üò° –î–æ–≤–±–∞–Ω—ñ –º–æ—Å–∫–æ–≤—Å—å–∫—ñ –´–º–ø–µ—Ä—ñ–∞–ª—ñ—Å—Ç–∏! –û—Ñ—ñ—Å –∑–Ω–æ–≤—É –±–µ–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∏!",
        "üò° –¢–∞ —â–æ–± —ó–º –ø—É—Å—Ç–æ –±—É–ª–æ —Ü–∏–º –ø–æ–∫–∏–¥—å–∫–∞–º! –ó–Ω–∏–∫–ª–æ –µ–Ω–µ—Ä–≥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è!",
        "üò° –í–µ–ª—å–º–∏—à–∞–Ω–æ–≤–Ω–µ –ø–∞–Ω—Å—Ç–≤–æ, –∑—ñ —Å–∫–æ—Ä–±–æ—Ç–æ—é –ø–æ–≤—ñ–¥–æ–º–ª—è—é, —â–æ –æ—Ñ—ñ—Å –Ω–∞—Ä–∞–∑—ñ –ª–∏—à–∏–≤—Å—è –±–µ–∑ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è.",
        "üò° –û—Ç–æ –≤–∂–µ –∫–æ–Ω—á–µ–Ω—ñ! –î–∞—é—Ç—å –Ω–∞–º –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–µ–∫–æ–Ω–æ–º–∏—Ç–∏ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–∏—Ü—ñ —Ç–∞ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏ –∑–∞–ª–∏—à–æ–∫ –Ω–∞ –ó–°–£! –í –æ—Ñ—ñ—Å—ñ –∑–Ω–∏–∫–ª–æ –µ–Ω–µ—Ä–≥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è.",
        "üò° –¢–∞ –∫—ñ–ª—å–∫–æ-—Ç–æ –º–æ–∂–Ω–∞ –≤–∂–µ?! –ß–µ—Ä–µ–∑ –∫–ª—è—Ç–∏—Ö –º–æ—Å–∫–∞–ª—ñ–≤ –º–∏ –±–µ–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∏!",
        "üò° –†–æ–∑–ø–æ–≤—ñ –≤—á–∏—Ç–µ–ª—å–∫–µ, —â–æ –≤–∂–µ –Ω–µ–º–∞ —Å–µ—á—ñ —Ç–µ—Ä–ø—ñ—Ç–∏ —Ü—ñ –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –µ–ª–µ–∫—Ç—Ä–æ—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è!",
        "üò° –ö—É–º–∞ —É –≤–∞–π–±–µ—Ä —á–∞—Ç—ñ –∫–∞–∂–µ —â–æ –Ω–µ–º–∞ –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ –≤ –æ—Ñ—ñ—Å—ñ! –ê –≤ –Ω–µ—ó –±—Ä–∞—Ç —Å–≤–µ–∫—Ä–∞ –≤ –°–ë–£ –ø—Ä–∞—Ü—é—î!",
        "üò° –°—Ç–∞—Ç—å –≥–æ–ª–æ–≤–∏ –≤–∂–µ —Å–∏–≤–∞ –≤—ñ–¥ –≥–∏–¥–∫–æ—ó —Ä—É—Å–Ω—ñ! –û—Ñ—ñ—Å –±–µ–∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–∏!",
    ])


# Get a message about the schedule
def schedule_message(locale):
    if int(time.strftime("%H").lstrip("0")) in shutdown_times:
        u = int(time.strftime("%H").lstrip("0")) + 4
        if u > 23:
            u = up_times[0]

        if locale == "uk":
            return "–ô–º–æ–≤—ñ—Ä–Ω–µ –≤–∫–ª—é—á–µ–Ω–Ω—è –∑–∞ –≥—Ä–∞—Ñ—ñ–∫–æ–º, –æ " + str(u).zfill(2) + ":00"
        else:
            return "It's likely to switch on according to schedule " + str(u).zfill(2) + ":00"
    else:
        if locale == "uk":
            return "–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –∑–∞ –≥—Ä–∞—Ñ—ñ–∫–æ–º, –º–∞–±—É–¥—å –∞–≤–∞—Ä—ñ–π–Ω–µ..."
        else:
            return "Outage not according to schedule, probably an emergency..."


# Get a message about the duration of the last power outage
def power_outage_lasted_message(locale):
    last_power_outage = get_last_power_outage()

    if last_power_outage:
        current_time = get_current_date()

        if last_power_outage > current_time:
            raise ValueError("Last power outage is in the future.")

        delta = current_time - last_power_outage

        if locale == "uk":
            mydict = {
                "–¥–µ–Ω—å": "–¥–µ–Ω—å",
                "–¥–Ω—è": "–¥–Ω—ñ",
                "–¥–Ω–µ–π": "–¥–Ω—ñ–≤",
                "—á–∞—Å–æ–≤": "–≥–æ–¥–∏–Ω",
                "—á–∞—Å–∞": "–≥–æ–¥–∏–Ω–∏",
                "—á–∞—Å": "–≥–æ–¥–∏–Ω—É",
                "–º–∏–Ω—É—Ç—É": "—Ö–≤–∏–ª–∏–Ω—É",
                "–º–∏–Ω—É—Ç—ã": "—Ö–≤–∏–ª–∏–Ω–∏",
                "–º–∏–Ω—É—Ç": "—Ö–≤–∏–ª–∏–Ω",
                "—Å–µ–∫—É–Ω–¥–∞": "—Å–µ–∫—É–Ω–¥–∞",
                "—Å–µ–∫—É–Ω–¥—ã": "—Å–µ–∫—É–Ω–¥–∏",
                "—Å–µ–∫—É–Ω–¥": "—Å–µ–∫—É–Ω–¥"
            }
            mystr = f"–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —Ç—Ä–∏–≤–∞–ª–æ {delta.in_words(locale='ru')}."
            for k, v in mydict.items():
                mystr = mystr.replace(k, v)

            return mystr
        else:
            return f"Power outage lasted {delta.in_words(locale=locale)}."

    return ""


# Messages for each state
class electricity_status_messages_en(Enum):
    no_electricity = get_swear_messages_en() + "\n" + schedule_message('en')
    unknown_electricity_source = "‚ö° There is no information about the electricity source, but it is there!"
    generator = "‚ö° We are working from a generator, please turn off the heaters and air conditioning."
    city_electricity = "‚ö° We are working from the city's electrical supply." + "\n" + power_outage_lasted_message('en')


# Messages for each state
class electricity_status_messages_uk(Enum):
    no_electricity = get_swear_messages_uk() + "\n" + schedule_message('uk')
    unknown_electricity_source = "‚ö° –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ –µ–ª–µ–∫—Ç—Ä–æ—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–æ —î!"
    generator = "‚ö° –ü—Ä–∞—Ü—é—î–º–æ –≤—ñ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, –≤–∏–º–∫–Ω—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –æ–±—ñ–≥—Ä—ñ–≤–∞—á—ñ —Ç–∞ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∏."
    city_electricity = "‚ö° –ü—Ä–∞—Ü—é—î–º–æ –≤—ñ–¥ –º—ñ—Å—å–∫–æ–≥–æ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è." + "\n" + power_outage_lasted_message('uk')


# Send a message about the current state
def send_electricity_status_message():
    if get_current_date().day == 4 and os.getenv("ENGLISH_FRIDAY", "False") == "True":
        send_message(electricity_status_messages_en[current_state.name].value)
    else:
        send_message(electricity_status_messages_uk[current_state.name].value)


# Send a message to the telegram chat
def send_message(message):
    if os.getenv("DO_NOT_DISTURB_AT_NIGHT", "False") == "True":
        if int(time.strftime("%H").lstrip("0")) in range(0, 6):
            print(get_current_date().to_datetime_string() + " - " + message)
            print("DO_NOT_DISTURB_AT_NIGHT is set to True, not sending a message at night.")
            return

    if not os.getenv("DRY_RUN", "False") == "True":
        for chat in chat_id:
            bot.send_message(chat, message)
    else:
        print(get_current_date().to_datetime_string() + " - " + message)


# Get the current state
current_state = get_last_power_state()

# Check the current state
# If the state is unknown, check the generator
# If the generator is True, then the state is generator
# If the generator is False, then the state is city electricity
if last_state():
    if current_state.value < electricity_states.unknown_electricity_source.value:
        save_power_state(electricity_states.unknown_electricity_source)
        send_electricity_status_message()

    if current_state.value >= electricity_states.unknown_electricity_source.value:
        if os.getenv("CHECK_GENERATOR_STATE") == "True":
            if check_generator_state():
                if current_state != electricity_states.generator:
                    save_power_state(electricity_states.generator)
                    send_electricity_status_message()
            elif current_state != electricity_states.city_electricity:
                save_power_state(electricity_states.city_electricity)
                send_electricity_status_message()
                os.remove("last_power_outage.txt")
        else:
            if current_state != electricity_states.unknown_electricity_source:
                save_power_state(electricity_states.unknown_electricity_source)
                send_electricity_status_message()
                os.remove("last_power_outage.txt")
else:
    if current_state != electricity_states.no_electricity:
        save_power_state(electricity_states.no_electricity)
        send_electricity_status_message()
